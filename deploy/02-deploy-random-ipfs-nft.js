const { network, ethers } = require("hardhat");
const { developmentChains, networkConfig } = require("../helper-hardhat-config");
const { verify } = require("../utils/verify");
const { storeImages, storeTokenUriMetadata } = require("../utils/uploadToPinata");

const imagesLocation = "./images/randomNft";

const metadataTemplate = {
	name: "",
	description: "",
	image: "",
	attributes: [
		{
			trait_type: "Cuteness",
			value: 100,
		},
	],
};

let tokenUris = [
	"ipfs://QmaVkBn2tKmjbhphU7eyztbvSQU5EXDdqRyXZtRhSGgJGo",
	"ipfs://QmYQC5aGZu2PTH8XzbJrbDnvhj3gVs7ya33H9mqUNvST3d",
	"ipfs://QmZYmH5iDbD6v3U2ixoVAjioSzvWJszDzYdbeCLquGSpVm",
];

const FUND_AMOUNT = ethers.utils.parseUnits("0.1");

module.exports = async ({ getNamedAccounts, deployments }) => {
	const { deploy, log } = deployments;
	const { deployer } = await getNamedAccounts();
	const chainId = network.config.chainId;
	// we populate this with the tokenUris generated by the metadata upload to pinata

	// get the ipfs hashes of our images
	if (process.env.UPLOAD_TO_PINATA == "true") {
		tokenUris = await handleTokenUris();
	}

	// 1. With our own ipfs node: https://docs.ipfs.io/
	// OR
	// 2. Pinata: pinata.cloud
	// example of script: https://github.com/PatrickAlphaC/hardhat-nft-fcc/blob/main/utils/uploadToPinata.js
	// 3. NFT Storage: (check chrome bookmarks -> NFT);
	// example of script: https://github.com/PatrickAlphaC/hardhat-nft-fcc/blob/main/utils/uploadToNftStorage.js

	let vrfCoordinatorV2Address, subscriptionId;

	if (developmentChains.includes(network.name)) {
		const vrfCoordinatorV2Mock = await ethers.getContract("VRFCoordinatorV2Mock");
		vrfCoordinatorV2Address = vrfCoordinatorV2Mock.address;
		const tx = await vrfCoordinatorV2Mock.createSubscription();
		const txReceipt = await tx.wait();
		subscriptionId = txReceipt.events[0].args.subId;
		// fund subscription
		await vrfCoordinatorV2Mock.fundSubscription(subscriptionId, FUND_AMOUNT);
	} else {
		vrfCoordinatorV2Address = networkConfig[chainId].vrfCoordinatorV2;
		subscriptionId = networkConfig[chainId].subscriptionId;
	}

	log("------------------------");
	const args = [
		vrfCoordinatorV2Address,
		subscriptionId,
		networkConfig[chainId].gasLane,
		networkConfig[chainId].callbackGasLimit,
		tokenUris,
		networkConfig[chainId].mintFee,
	];

	const randomIpfsNft = await deploy("RandomIpfsNft", {
		from: deployer,
		args: args,
		log: true,
		waitConfirmations: network.config.blockConfirmations || 1,
	});
	log("------------------------");
	if (!developmentChains.includes(network.name) && process.env.ETHERSCAN_API_KEY) {
		log("Verifying...");
		await verify(basicNft.address, args);
	}
	log("----------------------------");
};

async function handleTokenUris() {
	tokenUris = [];
	// store the image in ipfs
	// store the metadata in ipfs
	const { responses: imageUploadResponses, files } = await storeImages(imagesLocation);
	for (imageUploadResponseIndex in imageUploadResponses) {
		// create metadata
		// upload the metadata
		// {...metadataTemplate} takes all properties from metadataTemplate and puts them into tokenUriMetadata
		let tokenUriMetadata = { ...metadataTemplate };
		tokenUriMetadata.name = files[imageUploadResponseIndex].replace(".png", "");
		tokenUriMetadata.description = `An adorable ${tokenUriMetadata.name} pup!`;
		// the response from pinFileToIPFS returns an IpfsHash, PinSize and Timestamp; see Pinata docs for more details: https://docs.pinata.cloud/pinata-api/pinning/pin-file-or-directory#uploading-and-pinning-a-single-file
		tokenUriMetadata.image = `ipfs://${imageUploadResponses[imageUploadResponseIndex].IpfsHash}`;
		console.log(`Uploading ${tokenUriMetadata.name}...`);
		const metadataUploadResponse = await storeTokenUriMetadata(tokenUriMetadata);
		tokenUris.push(`ipfs://${metadataUploadResponse.IpfsHash}`);
	}
	console.log("Token URIs Uploaded! They are:");
	console.log(tokenUris);
	return tokenUris;
}

module.exports.tags = ["all", "randomipfs", "main"];
